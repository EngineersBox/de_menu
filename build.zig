const std = @import("std");
const ctime = @cImport({
    @cInclude("time.h");
});

// NOTE: The `dependencies` field can't be represented https://github.com/ziglang/zig/issues/22775
//       Once this merged PR https://github.com/ziglang/zig/pull/22907 has made it into a release
//       we can just bind the build.zig.zon as a module directly to allow importing
const build_zon: struct {
    name: @Type(.enum_literal),
    version: []const u8,
    fingerprint: u64,
    minimum_zig_version: []const u8,
    dependencies: struct {
        raylib_zig: struct {
            url: []const u8,
            hash: []const u8,
        },
        clap: struct {
            url: []const u8,
            hash: []const u8,
        },
        fontconfig: struct {
            url: []const u8,
            hash: []const u8,
        },
    },
    paths: []const []const u8,
} = @import("build.zig.zon");
const SOURCE_DIR = "src/";
const META_FILE = SOURCE_DIR ++ "meta.zig";

const TARGETS = [_]std.Target.Query {
    .{ .os_tag = .linux, .cpu_arch = .aarch64, },
    .{ .os_tag = .linux, .cpu_arch = .x86_64, },
    .{ .os_tag = .linux, .cpu_arch = .x86, },

    .{ .os_tag = .macos, .cpu_arch = .aarch64, },
    .{ .os_tag = .macos, .cpu_arch = .x86_64, },

    .{ .os_tag = .windows, .cpu_arch = .aarch64, },
    .{ .os_tag = .windows, .cpu_arch = .x86_64, },
};

pub fn build(b: *std.Build) void {
    const target = b.standardTargetOptions(.{});
    const optimize = b.standardOptimizeOption(.{});

    const raylib = b.dependency("raylib_zig", .{
        .target = target,
        .optimize = optimize,
    });
    const clap = b.dependency("clap", .{
        .target = target,
        .optimize = optimize,
    });
    // TODO: Remove this? Or keep it uncommented for the lols?
    // Mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
    // const microwave = b.dependency("microwave", .{
    //     .target = target,
    //     .optimize = optimize,
    // });
    const fontconfig = b.dependency(
        "fontconfig",
        .{
            .target = target,
            .optimize = optimize,
            // FIXME: The build of libxml2 in engineersbox/zig-build-libxml2
            //        causes a segfault in the parser, so it's disabled here
            //        and "expat" is used instead. Update the version of libxml2
            //        in the dependent repo and all downstream deps, then
            //        update the fontconfig dependency here and remove this.
            .@"enable-libxml2" = false,
        },
    );
    // const build_zon = b.createModule(.{
    //     .root_source_file = b.path("build.zig.zon"),
    //     .target = target,
    //     .optimize = optimize,
    // });
    // exe.root_module.addImport("microwave", microwave.module("microwave"));
    const host_exe_mod = b.createModule(.{
        .root_source_file = b.path("src/main.zig"),
        .target = target,
        .optimize = optimize,
    });
    const host_exe = create_exe(
        b,
        host_exe_mod,
        raylib,
        clap,
        fontconfig
    );
    host_exe.step.dependOn(writeMetaFileStep(b));
    b.installArtifact(host_exe);

    // TODO: Fix libxml2 dep in order to allow cross-compilation
    // for (TARGETS) |target_query| {
    //     const exe_mod = b.createModule(.{
    //         .root_source_file = b.path("src/main.zig"),
    //         .target = b.resolveTargetQuery(target_query),
    //         .optimize = optimize,
    //     });
    //     const exe = create_exe(
    //         b,
    //         exe_mod,
    //         raylib,
    //         clap,
    //         fontconfig
    //     );
    //     b.installArtifact(exe);
    // }

    const run_cmd = b.addRunArtifact(host_exe);
    run_cmd.step.dependOn(b.getInstallStep());
    if (b.args) |args| {
        run_cmd.addArgs(args);
    }

    const run_step = b.step("run", "Run the app");
    run_step.dependOn(&run_cmd.step);

    const exe_unit_tests = b.addTest(.{
        .root_module = host_exe_mod,
    });
    const run_exe_unit_tests = b.addRunArtifact(exe_unit_tests);

    const test_step = b.step("test", "Run unit tests");
    test_step.dependOn(&run_exe_unit_tests.step);
}

fn writeMetaFileStep(b: *std.Build) *std.Build.Step {
    const write_version_step = b.addUpdateSourceFiles();
    var now: ctime.time_t = undefined;
    _ = ctime.time(&now);
    const timeinfo: [*c]ctime.struct_tm = ctime.localtime(&now);
    const s: [*c]const u8 = ctime.asctime(timeinfo);
    const file_data: []u8 = b.fmt(
        "// WARN: Autogenerated at build time, do NOT modify manually \n"
        ++ "pub const NAME: []const u8 = \"" ++ @tagName(build_zon.name) ++ "\";\n"
        ++ "pub const VERSION: []const u8 = \"" ++ build_zon.version ++ "\";\n"
        ++ "pub const COMPILATION_DATE: []const u8 = \"{s}\";",
        .{s[0..std.mem.len(s) - 1]},
    );
    write_version_step.addBytesToSource(
        file_data,
        META_FILE,
    );
    return &write_version_step.step;
}

fn create_exe(
    b: *std.Build,
    module: *std.Build.Module,
    raylib: *std.Build.Dependency,
    clap: *std.Build.Dependency,
    fontconfig: *std.Build.Dependency,
) *std.Build.Step.Compile {
    const exe = b.addExecutable(.{
        .name = "de_menu",
        .root_module = module,
    });
    exe.linkLibrary(raylib.artifact("raylib"));
    // NOTE: This GitHub issue is useful for figuring
    //       out how to link stuff: https://github.com/ziglang/zig/issues/11151
    // TODO: Remove this once libxml2 support is fixed
    exe.linkSystemLibrary("expat");
    exe.linkLibrary(fontconfig.artifact("fontconfig"));
    // exe.root_module.addImport("build_zon", build_zon);
    exe.root_module.addImport("raylib", raylib.module("raylib"));
    exe.root_module.addImport("raygui", raylib.module("raygui"));
    exe.root_module.addImport("clap", clap.module("clap"));
    return exe;
}
